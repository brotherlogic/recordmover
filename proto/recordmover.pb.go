// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        (unknown)
// source: recordmover.proto

package recordmover

import (
	context "context"
	proto1 "github.com/brotherlogic/recordcollection/proto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RecordedMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The record being moved
	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The time of the move
	MoveTime int64 `protobuf:"varint,2,opt,name=move_time,json=moveTime,proto3" json:"move_time,omitempty"`
	// The eventual destination of the move
	MoveLocation string `protobuf:"bytes,3,opt,name=move_location,json=moveLocation,proto3" json:"move_location,omitempty"`
	// The initial location of the move
	MoveStart string `protobuf:"bytes,4,opt,name=move_start,json=moveStart,proto3" json:"move_start,omitempty"`
	// The rule applied to make the move
	Rule string `protobuf:"bytes,5,opt,name=rule,proto3" json:"rule,omitempty"`
	From int32  `protobuf:"varint,6,opt,name=from,proto3" json:"from,omitempty"`
	To   int32  `protobuf:"varint,7,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *RecordedMove) Reset() {
	*x = RecordedMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordedMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordedMove) ProtoMessage() {}

func (x *RecordedMove) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordedMove.ProtoReflect.Descriptor instead.
func (*RecordedMove) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{0}
}

func (x *RecordedMove) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *RecordedMove) GetMoveTime() int64 {
	if x != nil {
		return x.MoveTime
	}
	return 0
}

func (x *RecordedMove) GetMoveLocation() string {
	if x != nil {
		return x.MoveLocation
	}
	return ""
}

func (x *RecordedMove) GetMoveStart() string {
	if x != nil {
		return x.MoveStart
	}
	return ""
}

func (x *RecordedMove) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *RecordedMove) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *RecordedMove) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Moves          []*RecordMove   `protobuf:"bytes,1,rep,name=moves,proto3" json:"moves,omitempty"`
	MoveArchive    []*RecordedMove `protobuf:"bytes,2,rep,name=move_archive,json=moveArchive,proto3" json:"move_archive,omitempty"`
	LastPull       int64           `protobuf:"varint,3,opt,name=last_pull,json=lastPull,proto3" json:"last_pull,omitempty"`
	NextUpdateTime map[int32]int64 `protobuf:"bytes,4,rep,name=next_update_time,json=nextUpdateTime,proto3" json:"next_update_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetMoves() []*RecordMove {
	if x != nil {
		return x.Moves
	}
	return nil
}

func (x *Config) GetMoveArchive() []*RecordedMove {
	if x != nil {
		return x.MoveArchive
	}
	return nil
}

func (x *Config) GetLastPull() int64 {
	if x != nil {
		return x.LastPull
	}
	return 0
}

func (x *Config) GetNextUpdateTime() map[int32]int64 {
	if x != nil {
		return x.NextUpdateTime
	}
	return nil
}

type MoveArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Moves []*RecordedMove `protobuf:"bytes,1,rep,name=moves,proto3" json:"moves,omitempty"`
}

func (x *MoveArchive) Reset() {
	*x = MoveArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveArchive) ProtoMessage() {}

func (x *MoveArchive) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveArchive.ProtoReflect.Descriptor instead.
func (*MoveArchive) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{2}
}

func (x *MoveArchive) GetMoves() []*RecordedMove {
	if x != nil {
		return x.Moves
	}
	return nil
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before         *proto1.Record `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"` // DEPRECATED
	BeforeInstance int32          `protobuf:"varint,5,opt,name=before_instance,json=beforeInstance,proto3" json:"before_instance,omitempty"`
	Location       string         `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	After          *proto1.Record `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"` // DEPRECATED
	AfterInstance  int32          `protobuf:"varint,6,opt,name=after_instance,json=afterInstance,proto3" json:"after_instance,omitempty"`
	Slot           int32          `protobuf:"varint,4,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{3}
}

func (x *Context) GetBefore() *proto1.Record {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *Context) GetBeforeInstance() int32 {
	if x != nil {
		return x.BeforeInstance
	}
	return 0
}

func (x *Context) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Context) GetAfter() *proto1.Record {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *Context) GetAfterInstance() int32 {
	if x != nil {
		return x.AfterInstance
	}
	return 0
}

func (x *Context) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type RecordMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId    int32          `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	FromFolder    int32          `protobuf:"varint,2,opt,name=from_folder,json=fromFolder,proto3" json:"from_folder,omitempty"`
	ToFolder      int32          `protobuf:"varint,3,opt,name=to_folder,json=toFolder,proto3" json:"to_folder,omitempty"`
	MoveDate      int64          `protobuf:"varint,4,opt,name=move_date,json=moveDate,proto3" json:"move_date,omitempty"`
	Record        *proto1.Record `protobuf:"bytes,5,opt,name=record,proto3" json:"record,omitempty"` // DEPRECATED
	BeforeContext *Context       `protobuf:"bytes,6,opt,name=before_context,json=beforeContext,proto3" json:"before_context,omitempty"`
	AfterContext  *Context       `protobuf:"bytes,7,opt,name=after_context,json=afterContext,proto3" json:"after_context,omitempty"`
	LastUpdate    int64          `protobuf:"varint,8,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
}

func (x *RecordMove) Reset() {
	*x = RecordMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMove) ProtoMessage() {}

func (x *RecordMove) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMove.ProtoReflect.Descriptor instead.
func (*RecordMove) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{4}
}

func (x *RecordMove) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *RecordMove) GetFromFolder() int32 {
	if x != nil {
		return x.FromFolder
	}
	return 0
}

func (x *RecordMove) GetToFolder() int32 {
	if x != nil {
		return x.ToFolder
	}
	return 0
}

func (x *RecordMove) GetMoveDate() int64 {
	if x != nil {
		return x.MoveDate
	}
	return 0
}

func (x *RecordMove) GetRecord() *proto1.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *RecordMove) GetBeforeContext() *Context {
	if x != nil {
		return x.BeforeContext
	}
	return nil
}

func (x *RecordMove) GetAfterContext() *Context {
	if x != nil {
		return x.AfterContext
	}
	return nil
}

func (x *RecordMove) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

type Moves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Moves []*RecordMove `protobuf:"bytes,1,rep,name=moves,proto3" json:"moves,omitempty"`
}

func (x *Moves) Reset() {
	*x = Moves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Moves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Moves) ProtoMessage() {}

func (x *Moves) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Moves.ProtoReflect.Descriptor instead.
func (*Moves) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{5}
}

func (x *Moves) GetMoves() []*RecordMove {
	if x != nil {
		return x.Moves
	}
	return nil
}

type MoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Move *RecordMove `protobuf:"bytes,1,opt,name=move,proto3" json:"move,omitempty"`
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{6}
}

func (x *MoveRequest) GetMove() *RecordMove {
	if x != nil {
		return x.Move
	}
	return nil
}

type MoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoveResponse) Reset() {
	*x = MoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveResponse) ProtoMessage() {}

func (x *MoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveResponse.ProtoReflect.Descriptor instead.
func (*MoveResponse) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{7}
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{8}
}

func (x *ListRequest) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Moves    []*RecordMove   `protobuf:"bytes,1,rep,name=moves,proto3" json:"moves,omitempty"`
	Archives []*RecordedMove `protobuf:"bytes,2,rep,name=archives,proto3" json:"archives,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{9}
}

func (x *ListResponse) GetMoves() []*RecordMove {
	if x != nil {
		return x.Moves
	}
	return nil
}

func (x *ListResponse) GetArchives() []*RecordedMove {
	if x != nil {
		return x.Archives
	}
	return nil
}

type ClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *ClearRequest) Reset() {
	*x = ClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearRequest) ProtoMessage() {}

func (x *ClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearRequest.ProtoReflect.Descriptor instead.
func (*ClearRequest) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{10}
}

func (x *ClearRequest) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type ClearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearResponse) Reset() {
	*x = ClearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordmover_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearResponse) ProtoMessage() {}

func (x *ClearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordmover_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearResponse.ProtoReflect.Descriptor instead.
func (*ClearResponse) Descriptor() ([]byte, []int) {
	return file_recordmover_proto_rawDescGZIP(), []int{11}
}

var File_recordmover_proto protoreflect.FileDescriptor

var file_recordmover_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72,
	0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x74, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a,
	0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x0b, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x4e, 0x65,
	0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a,
	0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05,
	0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x22, 0xeb, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x0a,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x36, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x6f,
	0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f,
	0x76, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0b, 0x4d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x05, 0x6d,
	0x6f, 0x76, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76,
	0x65, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x0c, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdc, 0x01,
	0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x18, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12,
	0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d,
	0x6f, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d,
	0x2e, 0x3b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recordmover_proto_rawDescOnce sync.Once
	file_recordmover_proto_rawDescData = file_recordmover_proto_rawDesc
)

func file_recordmover_proto_rawDescGZIP() []byte {
	file_recordmover_proto_rawDescOnce.Do(func() {
		file_recordmover_proto_rawDescData = protoimpl.X.CompressGZIP(file_recordmover_proto_rawDescData)
	})
	return file_recordmover_proto_rawDescData
}

var file_recordmover_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_recordmover_proto_goTypes = []interface{}{
	(*RecordedMove)(nil),  // 0: recordmover.RecordedMove
	(*Config)(nil),        // 1: recordmover.Config
	(*MoveArchive)(nil),   // 2: recordmover.MoveArchive
	(*Context)(nil),       // 3: recordmover.Context
	(*RecordMove)(nil),    // 4: recordmover.RecordMove
	(*Moves)(nil),         // 5: recordmover.Moves
	(*MoveRequest)(nil),   // 6: recordmover.MoveRequest
	(*MoveResponse)(nil),  // 7: recordmover.MoveResponse
	(*ListRequest)(nil),   // 8: recordmover.ListRequest
	(*ListResponse)(nil),  // 9: recordmover.ListResponse
	(*ClearRequest)(nil),  // 10: recordmover.ClearRequest
	(*ClearResponse)(nil), // 11: recordmover.ClearResponse
	nil, // 12: recordmover.Config.NextUpdateTimeEntry
	(*proto1.Record)(nil), // 13: recordcollection.Record
}
var file_recordmover_proto_depIdxs = []int32{
	4,  // 0: recordmover.Config.moves:type_name -> recordmover.RecordMove
	0,  // 1: recordmover.Config.move_archive:type_name -> recordmover.RecordedMove
	12, // 2: recordmover.Config.next_update_time:type_name -> recordmover.Config.NextUpdateTimeEntry
	0,  // 3: recordmover.MoveArchive.moves:type_name -> recordmover.RecordedMove
	13, // 4: recordmover.Context.before:type_name -> recordcollection.Record
	13, // 5: recordmover.Context.after:type_name -> recordcollection.Record
	13, // 6: recordmover.RecordMove.record:type_name -> recordcollection.Record
	3,  // 7: recordmover.RecordMove.before_context:type_name -> recordmover.Context
	3,  // 8: recordmover.RecordMove.after_context:type_name -> recordmover.Context
	4,  // 9: recordmover.Moves.moves:type_name -> recordmover.RecordMove
	4,  // 10: recordmover.MoveRequest.move:type_name -> recordmover.RecordMove
	4,  // 11: recordmover.ListResponse.moves:type_name -> recordmover.RecordMove
	0,  // 12: recordmover.ListResponse.archives:type_name -> recordmover.RecordedMove
	6,  // 13: recordmover.MoveService.RecordMove:input_type -> recordmover.MoveRequest
	8,  // 14: recordmover.MoveService.ListMoves:input_type -> recordmover.ListRequest
	10, // 15: recordmover.MoveService.ClearMove:input_type -> recordmover.ClearRequest
	7,  // 16: recordmover.MoveService.RecordMove:output_type -> recordmover.MoveResponse
	9,  // 17: recordmover.MoveService.ListMoves:output_type -> recordmover.ListResponse
	11, // 18: recordmover.MoveService.ClearMove:output_type -> recordmover.ClearResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_recordmover_proto_init() }
func file_recordmover_proto_init() {
	if File_recordmover_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recordmover_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordedMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Moves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordmover_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recordmover_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_recordmover_proto_goTypes,
		DependencyIndexes: file_recordmover_proto_depIdxs,
		MessageInfos:      file_recordmover_proto_msgTypes,
	}.Build()
	File_recordmover_proto = out.File
	file_recordmover_proto_rawDesc = nil
	file_recordmover_proto_goTypes = nil
	file_recordmover_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MoveServiceClient is the client API for MoveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MoveServiceClient interface {
	RecordMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	ListMoves(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ClearMove(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
}

type moveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoveServiceClient(cc grpc.ClientConnInterface) MoveServiceClient {
	return &moveServiceClient{cc}
}

func (c *moveServiceClient) RecordMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/recordmover.MoveService/RecordMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveServiceClient) ListMoves(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/recordmover.MoveService/ListMoves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveServiceClient) ClearMove(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, "/recordmover.MoveService/ClearMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoveServiceServer is the server API for MoveService service.
type MoveServiceServer interface {
	RecordMove(context.Context, *MoveRequest) (*MoveResponse, error)
	ListMoves(context.Context, *ListRequest) (*ListResponse, error)
	ClearMove(context.Context, *ClearRequest) (*ClearResponse, error)
}

// UnimplementedMoveServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMoveServiceServer struct {
}

func (*UnimplementedMoveServiceServer) RecordMove(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordMove not implemented")
}
func (*UnimplementedMoveServiceServer) ListMoves(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMoves not implemented")
}
func (*UnimplementedMoveServiceServer) ClearMove(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearMove not implemented")
}

func RegisterMoveServiceServer(s *grpc.Server, srv MoveServiceServer) {
	s.RegisterService(&_MoveService_serviceDesc, srv)
}

func _MoveService_RecordMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveServiceServer).RecordMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordmover.MoveService/RecordMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveServiceServer).RecordMove(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveService_ListMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveServiceServer).ListMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordmover.MoveService/ListMoves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveServiceServer).ListMoves(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveService_ClearMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveServiceServer).ClearMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordmover.MoveService/ClearMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveServiceServer).ClearMove(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MoveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordmover.MoveService",
	HandlerType: (*MoveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordMove",
			Handler:    _MoveService_RecordMove_Handler,
		},
		{
			MethodName: "ListMoves",
			Handler:    _MoveService_ListMoves_Handler,
		},
		{
			MethodName: "ClearMove",
			Handler:    _MoveService_ClearMove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordmover.proto",
}
