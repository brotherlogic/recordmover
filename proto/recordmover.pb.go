// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recordmover.proto

/*
Package recordprocessor is a generated protocol buffer package.

It is generated from these files:
	recordmover.proto

It has these top-level messages:
	RecordMove
	Moves
	MoveRequest
	MoveResponse
	ListRequest
	ListResponse
	ClearRequest
	ClearResponse
*/
package recordprocessor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RecordMove struct {
	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	FromFolder int32 `protobuf:"varint,2,opt,name=from_folder,json=fromFolder" json:"from_folder,omitempty"`
	ToFolder   int32 `protobuf:"varint,3,opt,name=to_folder,json=toFolder" json:"to_folder,omitempty"`
	MoveDate   int64 `protobuf:"varint,4,opt,name=move_date,json=moveDate" json:"move_date,omitempty"`
}

func (m *RecordMove) Reset()                    { *m = RecordMove{} }
func (m *RecordMove) String() string            { return proto.CompactTextString(m) }
func (*RecordMove) ProtoMessage()               {}
func (*RecordMove) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RecordMove) GetInstanceId() int32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *RecordMove) GetFromFolder() int32 {
	if m != nil {
		return m.FromFolder
	}
	return 0
}

func (m *RecordMove) GetToFolder() int32 {
	if m != nil {
		return m.ToFolder
	}
	return 0
}

func (m *RecordMove) GetMoveDate() int64 {
	if m != nil {
		return m.MoveDate
	}
	return 0
}

type Moves struct {
	Moves []*RecordMove `protobuf:"bytes,1,rep,name=moves" json:"moves,omitempty"`
}

func (m *Moves) Reset()                    { *m = Moves{} }
func (m *Moves) String() string            { return proto.CompactTextString(m) }
func (*Moves) ProtoMessage()               {}
func (*Moves) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Moves) GetMoves() []*RecordMove {
	if m != nil {
		return m.Moves
	}
	return nil
}

type MoveRequest struct {
	Move *RecordMove `protobuf:"bytes,1,opt,name=move" json:"move,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MoveRequest) GetMove() *RecordMove {
	if m != nil {
		return m.Move
	}
	return nil
}

type MoveResponse struct {
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ListResponse struct {
	Moves []*RecordMove `protobuf:"bytes,1,rep,name=moves" json:"moves,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListResponse) GetMoves() []*RecordMove {
	if m != nil {
		return m.Moves
	}
	return nil
}

type ClearRequest struct {
	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *ClearRequest) Reset()                    { *m = ClearRequest{} }
func (m *ClearRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearRequest) ProtoMessage()               {}
func (*ClearRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClearRequest) GetInstanceId() int32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

type ClearResponse struct {
}

func (m *ClearResponse) Reset()                    { *m = ClearResponse{} }
func (m *ClearResponse) String() string            { return proto.CompactTextString(m) }
func (*ClearResponse) ProtoMessage()               {}
func (*ClearResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*RecordMove)(nil), "recordprocessor.RecordMove")
	proto.RegisterType((*Moves)(nil), "recordprocessor.Moves")
	proto.RegisterType((*MoveRequest)(nil), "recordprocessor.MoveRequest")
	proto.RegisterType((*MoveResponse)(nil), "recordprocessor.MoveResponse")
	proto.RegisterType((*ListRequest)(nil), "recordprocessor.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "recordprocessor.ListResponse")
	proto.RegisterType((*ClearRequest)(nil), "recordprocessor.ClearRequest")
	proto.RegisterType((*ClearResponse)(nil), "recordprocessor.ClearResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ScoreService service

type ScoreServiceClient interface {
	RecordMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	ListMoves(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ClearMove(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
}

type scoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewScoreServiceClient(cc *grpc.ClientConn) ScoreServiceClient {
	return &scoreServiceClient{cc}
}

func (c *scoreServiceClient) RecordMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := grpc.Invoke(ctx, "/recordprocessor.ScoreService/RecordMove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) ListMoves(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/recordprocessor.ScoreService/ListMoves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) ClearMove(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := grpc.Invoke(ctx, "/recordprocessor.ScoreService/ClearMove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScoreService service

type ScoreServiceServer interface {
	RecordMove(context.Context, *MoveRequest) (*MoveResponse, error)
	ListMoves(context.Context, *ListRequest) (*ListResponse, error)
	ClearMove(context.Context, *ClearRequest) (*ClearResponse, error)
}

func RegisterScoreServiceServer(s *grpc.Server, srv ScoreServiceServer) {
	s.RegisterService(&_ScoreService_serviceDesc, srv)
}

func _ScoreService_RecordMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).RecordMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordprocessor.ScoreService/RecordMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).RecordMove(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_ListMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).ListMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordprocessor.ScoreService/ListMoves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).ListMoves(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_ClearMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).ClearMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordprocessor.ScoreService/ClearMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).ClearMove(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordprocessor.ScoreService",
	HandlerType: (*ScoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordMove",
			Handler:    _ScoreService_RecordMove_Handler,
		},
		{
			MethodName: "ListMoves",
			Handler:    _ScoreService_ListMoves_Handler,
		},
		{
			MethodName: "ClearMove",
			Handler:    _ScoreService_ClearMove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordmover.proto",
}

func init() { proto.RegisterFile("recordmover.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x59, 0x01, 0x03, 0xd3, 0x22, 0x71, 0x4f, 0x0d, 0xf8, 0x87, 0xec, 0x89, 0x13, 0x44,
	0xbc, 0x79, 0x30, 0x31, 0x1a, 0x13, 0x15, 0x2f, 0xe5, 0x03, 0x90, 0xda, 0x0e, 0x49, 0x13, 0x60,
	0xea, 0xee, 0xda, 0xcf, 0xe0, 0x17, 0xf6, 0x6e, 0x76, 0xb7, 0x0d, 0xd5, 0x4a, 0x48, 0x3c, 0xee,
	0x7b, 0xb3, 0xaf, 0xbf, 0x7d, 0x53, 0x38, 0x95, 0x18, 0x93, 0x4c, 0x36, 0x94, 0xa3, 0x9c, 0x64,
	0x92, 0x34, 0xf1, 0xbe, 0x93, 0x32, 0x49, 0x31, 0x2a, 0x45, 0x52, 0x7c, 0x32, 0x80, 0xd0, 0x6a,
	0xaf, 0x94, 0x23, 0xbf, 0x04, 0x2f, 0xdd, 0x2a, 0x1d, 0x6d, 0x63, 0x5c, 0xa6, 0x49, 0xc0, 0x46,
	0x6c, 0xdc, 0x0e, 0xa1, 0x94, 0x9e, 0x12, 0x33, 0xb0, 0x92, 0xb4, 0x59, 0xae, 0x68, 0x9d, 0xa0,
	0x0c, 0x8e, 0xdc, 0x80, 0x91, 0x1e, 0xad, 0xc2, 0x87, 0xd0, 0xd5, 0x54, 0xda, 0x4d, 0x6b, 0x77,
	0x34, 0xed, 0x4c, 0x43, 0xb3, 0x4c, 0x22, 0x8d, 0x41, 0x6b, 0xc4, 0xc6, 0xcd, 0xb0, 0x63, 0x84,
	0x87, 0x48, 0xa3, 0xb8, 0x81, 0xb6, 0x61, 0x50, 0xfc, 0x0a, 0xda, 0x46, 0x54, 0x01, 0x1b, 0x35,
	0xc7, 0xde, 0x6c, 0x38, 0xf9, 0x05, 0x3d, 0xd9, 0x01, 0x87, 0x6e, 0x52, 0xdc, 0x82, 0x67, 0x8f,
	0xf8, 0xfe, 0x81, 0x4a, 0xf3, 0x29, 0xb4, 0x8c, 0x6e, 0xf9, 0x0f, 0x04, 0xd8, 0x41, 0x71, 0x02,
	0xbe, 0xbb, 0xaf, 0x32, 0xda, 0x2a, 0x14, 0x3d, 0xf0, 0xe6, 0xa9, 0xd2, 0x45, 0x9e, 0xb8, 0x03,
	0xdf, 0x1d, 0x9d, 0xfd, 0x1f, 0xc2, 0x29, 0xf8, 0xf7, 0x6b, 0x8c, 0x64, 0x89, 0x78, 0xa8, 0x69,
	0xd1, 0x87, 0x5e, 0x71, 0xc1, 0x7d, 0x74, 0xf6, 0xc5, 0xc0, 0x5f, 0xc4, 0x24, 0x71, 0x81, 0x32,
	0x4f, 0x63, 0xe4, 0x2f, 0x3f, 0x56, 0x77, 0x56, 0x83, 0xa8, 0x34, 0x32, 0x38, 0xdf, 0xe3, 0x16,
	0xef, 0x6d, 0xf0, 0x67, 0xe8, 0x9a, 0x27, 0xba, 0x0d, 0xd4, 0xb3, 0x2a, 0x6d, 0xfc, 0x91, 0x55,
	0x2d, 0x47, 0x34, 0xf8, 0x1c, 0xba, 0x16, 0xdd, 0x72, 0xd5, 0xa7, 0xab, 0x3d, 0x0c, 0x2e, 0xf6,
	0xd9, 0x65, 0xda, 0xdb, 0xb1, 0xfd, 0x75, 0xaf, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xe8,
	0x24, 0x82, 0xcf, 0x02, 0x00, 0x00,
}
